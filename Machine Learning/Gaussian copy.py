import numpy as np
import matplotlib.pyplot as plt 
import math

def generate_data(mean_list, covariance_list, num_list):
    np.random.seed(0)
    data = np.random.multivariate_normal(mean_list[0], covariance_list[0], num_list[0])
    for i in range(len(mean_list)-1):
        new_data = np.random.multivariate_normal(mean_list[i+1], covariance_list[i+1], num_list[i+1])
        data = np.append(data, new_data, 0)
    return data

class Gaussian_wzc:
    def __init__(self, data, k):
        self.k = k
        self.x = data

    def distribution_plot(self):
        color_list = ['hotpink', 'slateblue', 'aquamarine']
        x = self.x[:,0]; y = self.x[:,1]
        l = 0; r = self.num_list[0] - 1
        plt.figure(figsize=(16,9))
        plt.scatter(x[l:r], y[l:r], c = color_list[0])
        for i in range(len(self.num_list)- 1):
            l += self.num_list[i]; r += self.num_list[i+1]
            plt.scatter(x[l:r], y[l:r], c = color_list[i+1])
        plt.title('The distribution of data generated by Gaussian', fontdict={'fontsize': 20})
        plt.show()

    def Gaussian_EM(self):
        n = len(self.x)                                                     # n = 900
        count = 0
        '''赋初始值'''
        alpha_list = np.ones((self.k,1))/self.k                             # 3*1   权值 = 1/k
        mu = np.array([np.average(self.x, axis = 0) for i in range(self.k)])     # 3*1*2 所有样本均值
        epsilon = np.array([(np.eye(2)+0.1) for i in range(self.k)])              # 3*2*2 对角单位阵
        '''开始EM算法迭代'''
        while(True and count < 10):
            if (False):                     #待输入的condition！！！！！！！！
                break
            else:
                '''E步'''
                '''计算marginal_P_list'''
                

                '''计算gamma_list'''


                '''M步，更新参数'''
                
                '''计算目标函数'''

        print(count)
        return mu, epsilon, alpha_list

'''生成数据用到的参数'''
mean_list = [[3,1],[8,10],[12,2]]
cov_list = [[[1,-0.5],[-0.5,1]],[[2,0.8],[0.8,2]],[[1,0],[0,1]]]
num_list = [300,300,300]
k = len(mean_list)

'''输出'''
data = generate_data(mean_list, cov_list, num_list)
data = data.reshape((900,-1,2))
gaus = Gaussian_wzc(data, k)                      #构造Gaussian类
# gaus.distribution_plot()
mu, epsilon, alpha_list = gaus.Gaussian_EM()
print(mu)
